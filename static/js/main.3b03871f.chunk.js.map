{"version":3,"sources":["components/card/Card.tsx","components/card-list/CardList.tsx","components/search-bar/SearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","monster","className","src","id","alt","name","username","email","CardList","monsters","searchText","filteredMonster","filter","toLowerCase","includes","map","SearchBar","placeholder","handleOnchange","type","onChange","e","currentTarget","value","App","useState","setMonsters","useEffect","a","axios","get","result","data","fetchData","setSearchText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAyBeA,EAlBF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QACd,OACE,sBAAKC,UAAU,6HAAf,UACE,qBAAKA,UAAU,+BAAf,SACE,qBACEC,IAAG,+BAA0BF,EAAQG,GAAlC,iBACHC,IAAKJ,EAAQK,SAIjB,sBAAKJ,UAAU,mBAAf,UACE,mBAAGA,UAAU,wBAAb,SAAsCD,EAAQM,WAC9C,4BAAIN,EAAQO,eCILC,EAdE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,WACtBC,EAAkBF,EAASG,QAAO,SAACZ,GAAD,OACtCA,EAAQM,SAASO,cAAcC,SAASJ,EAAWG,kBAGrD,OACE,qBAAKZ,UAAU,sEAAf,SACGU,EAAgBI,KAAI,SAACf,GAAD,OACnB,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQG,UCM9Ba,EAhBG,SAAC,GAGG,IAAD,IAFnBC,mBAEmB,MAFL,iBAEK,EADnBC,EACmB,EADnBA,eAEA,OACE,qBAAKjB,UAAU,6CAAf,SACE,uBACEA,UAAU,mCACVkB,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAOH,EAAeG,EAAEC,cAAcC,aC4BzCC,EAjCH,WAAO,IAAD,EACgBC,mBAA0B,IAD1C,mBACThB,EADS,KACCiB,EADD,KAGhBC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IAAMC,IACzB,8CAFc,OACVC,EADU,OAIhBL,EAAYK,EAAOC,MAJH,2CAAH,qDAOfC,KACC,IAZa,MAcoBR,mBAAS,IAd7B,mBAcTf,EAdS,KAcGwB,EAdH,KAoBhB,OACE,qBAAKjC,UAAU,2DAAf,SACE,sBAAKA,UAAU,8DAAf,UACE,mBAAGA,UAAU,gDAAb,6BAGA,cAAC,EAAD,CAAWiB,eAVM,SAACK,GACtBW,EAAcX,MAUV,cAAC,EAAD,CAAUd,SAAUA,EAAUC,WAAYA,UCzBnCyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b03871f.chunk.js","sourcesContent":["import React from 'react';\nimport { IMonster } from '../../App';\n\ninterface CardProp {\n  monster: IMonster;\n}\n\nconst Card = ({ monster }: CardProp) => {\n  return (\n    <div className=\"shadow-lg rounded flex flex-col items-center py-4 px-2 transform hover:-translate-y-1 duration-200 border border-green-500\">\n      <div className=\"object-cover overflow-hidden\">\n        <img\n          src={`https://robohash.org/${monster.id}?size=180x180`}\n          alt={monster.name}\n        />\n      </div>\n\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-xl font-semibold\">{monster.username}</p>\n        <p>{monster.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { IMonster } from '../../App';\nimport Card from '../card/Card';\n\ninterface CardListProp {\n  monsters: IMonster[];\n  searchText: string;\n}\n\nconst CardList = ({ monsters, searchText }: CardListProp) => {\n  const filteredMonster = monsters.filter((monster) =>\n    monster.username.toLowerCase().includes(searchText.toLowerCase())\n  );\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n      {filteredMonster.map((monster) => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { ReactNode } from 'react';\n\ninterface SearchBarProp {\n  placeholder?: string;\n  handleOnchange: (value: string) => void;\n}\n\nconst SearchBar = ({\n  placeholder = 'Search Monster',\n  handleOnchange,\n}: SearchBarProp) => {\n  return (\n    <div className=\"flex justify-center items-center mt-8 mb-4\">\n      <input\n        className=\"w-full max-w-md p-1 outline-none\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={(e) => handleOnchange(e.currentTarget.value)}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport CardList from './components/card-list/CardList';\nimport SearchBar from './components/search-bar/SearchBar';\n\nexport interface IMonster {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\nconst App = () => {\n  const [monsters, setMonsters] = useState<IMonster[] | []>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      setMonsters(result.data);\n    };\n\n    fetchData();\n  }, []);\n\n  const [searchText, setSearchText] = useState('');\n\n  const handleOnchange = (value: string): void => {\n    setSearchText(value);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-r from-green-500 to-blue-500\">\n      <div className=\"max-w-md py-8 mx-auto sm:max-w-xl md:max-w-3xl lg:max-w-6xl\">\n        <p className=\"text-center text-8xl font-semibold font-title\">\n          Monster Rolodex\n        </p>\n        <SearchBar handleOnchange={handleOnchange} />\n        <CardList monsters={monsters} searchText={searchText} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}